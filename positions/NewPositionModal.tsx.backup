import React, { useState, useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { addPosition } from '@/state/positionsSlice'
import { selectQuoteByInstrument } from '@/features/market/marketSlice'
import { instruments } from '@/config/instruments'
import type { RootState } from '@/state/store'

interface NewPositionModalProps {
  open: boolean
  onClose: () => void
  accountId: string
}

interface FormData {
  instrument: string
  amount: string
  priceMode: 'Market' | 'Specific'
  specificPrice: string
  tpEnabled: boolean
  tpValue: string
  slEnabled: boolean
  slValue: string
  description: string
}

export default function NewPositionModal({ open, onClose, accountId }: NewPositionModalProps) {
  const dispatch = useDispatch()
  const [formData, setFormData] = useState<FormData>({
    instrument: 'EURUSD',
    amount: '',
    priceMode: 'Market',
    specificPrice: '',
    tpEnabled: false,
    tpValue: '',
    slEnabled: false,
    slValue: '',
    description: ''
  })
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Get current market quote for selected instrument
  const currentQuote = useSelector((state: RootState) => 
    selectQuoteByInstrument(state, formData.instrument)
  )

  // Get selected instrument details
  const selectedInstrument = instruments.find(i => i.id === formData.instrument)

  // Reset form when modal opens
  useEffect(() => {
    if (open) {
      setFormData({
        instrument: 'EURUSD',
        amount: '',
        priceMode: 'Market',
        specificPrice: '',
        tpEnabled: false,
        tpValue: '',
        slEnabled: false,
        slValue: '',
        description: ''
      })
      setErrors({})
    }
  }, [open])

  // Update specific price when instrument changes
  useEffect(() => {
    if (currentQuote && formData.priceMode === 'Specific') {
      setFormData(prev => ({
        ...prev,
        specificPrice: currentQuote.last.toString()
      }))
    }
  }, [currentQuote, formData.instrument, formData.priceMode])

  if (!open) return null

  const handleInputChange = (field: keyof FormData, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {}

    if (!formData.instrument) {
      newErrors.instrument = 'Instrument is required'
    }

    const amount = parseFloat(formData.amount)
    if (!formData.amount || isNaN(amount) || amount <= 0) {
      newErrors.amount = 'Amount must be a positive number'
    }

    if (formData.priceMode === 'Specific') {
      const price = parseFloat(formData.specificPrice)
      if (!formData.specificPrice || isNaN(price) || price <= 0) {
        newErrors.specificPrice = 'Specific price must be a positive number'
      }
    }

    if (formData.tpEnabled) {
      const tp = parseFloat(formData.tpValue)
      if (!formData.tpValue || isNaN(tp) || tp <= 0) {
        newErrors.tpValue = 'Take Profit must be a positive number'
      }
    }

    if (formData.slEnabled) {
      const sl = parseFloat(formData.slValue)
      if (!formData.slValue || isNaN(sl) || sl <= 0) {
        newErrors.slValue = 'Stop Loss must be a positive number'
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleSubmit = async (type: 'Buy' | 'Sell') => {
    if (!validateForm() || isSubmitting) return

    setIsSubmitting(true)

    try {
      let entryPrice: number

      if (formData.priceMode === 'Market') {
        if (!currentQuote) {
          throw new Error('No market price available')
        }
        entryPrice = type === 'Buy' ? currentQuote.ask : currentQuote.bid
      } else {
        entryPrice = parseFloat(formData.specificPrice)
      }

      const newPosition = {
        id: `POS-${Date.now()}`,
        clientId: accountId,
        instrument: selectedInstrument?.symbol || formData.instrument,
        type,
        amount: parseFloat(formData.amount),
        openVolume: parseFloat(formData.amount) * entryPrice,
        openPrice: entryPrice,
        currentPrice: currentQuote?.last || entryPrice,
        takeProfit: formData.tpEnabled ? parseFloat(formData.tpValue) : undefined,
        stopLoss: formData.slEnabled ? parseFloat(formData.slValue) : undefined,
        openReason: formData.description || undefined,
        openPnL: 0,
        openIp: '192.168.1.1',
        commission: parseFloat(formData.amount) * 0.0015, // 0.15%
        swap: 0,
        totalPnL: 0,
        status: 'open' as const,
        openedAt: new Date().toISOString()
      }

      dispatch(addPosition(newPosition))
      onClose()
    } catch (error) {
      console.error('Error creating position:', error)
      setErrors({ general: error instanceof Error ? error.message : 'Failed to create position' })
    } finally {
      setIsSubmitting(false)
    }
  }

  const stepValue = (field: 'tpValue' | 'slValue', direction: 1 | -1) => {
    const current = parseFloat(formData[field]) || 0
    const step = selectedInstrument?.tickSize || 0.0001
    const newValue = Math.max(0, current + (direction * step))
    handleInputChange(field, newValue.toFixed(selectedInstrument?.precision || 4))
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-gray-900 bg-opacity-75">
      <div className="w-full max-w-2xl bg-white rounded-xl shadow-xl border border-gray-200 max-h-[90vh] overflow-y-auto">
        <div className="px-8 py-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">New Position</h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <svg className="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        <div className="p-8 space-y-5">
          {errors.general && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-sm text-red-600">{errors.general}</p>
            </div>
          )}

          {/* Two-column layout for compact design */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Instrument Selection */}
            <div className="md:col-span-2">
              <label className="block text-sm font-medium text-gray-700 mb-1.5">
                Instrument
              </label>
              <select
                value={formData.instrument}
                onChange={(e) => handleInputChange('instrument', e.target.value)}
                className="w-full px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {instruments.map((instrument) => (
                  <option key={instrument.id} value={instrument.id}>
                    {instrument.symbol} - {instrument.name}
                  </option>
                ))}
              </select>
              {errors.instrument && <p className="mt-1 text-xs text-red-600">{errors.instrument}</p>}
            </div>

            {/* Amount */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1.5">
                Amount
              </label>
              <input
                type="number"
                value={formData.amount}
                onChange={(e) => handleInputChange('amount', e.target.value)}
                placeholder="10000"
                min="0"
                step="1000"
                className="w-full px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              {errors.amount && <p className="mt-1 text-xs text-red-600">{errors.amount}</p>}
            </div>

            {/* Price Mode */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price Mode
              </label>
              <div className="flex bg-gray-100 rounded-lg p-1">
                <label className="flex-1 flex items-center justify-center cursor-pointer">
                  <input
                    type="radio"
                    name="priceMode"
                    value="Market"
                    checked={formData.priceMode === 'Market'}
                    onChange={(e) => handleInputChange('priceMode', e.target.value)}
                    className="sr-only"
                  />
                  <span className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    formData.priceMode === 'Market' 
                      ? 'bg-blue-600 text-white' 
                      : 'text-gray-600 hover:bg-gray-200'
                  }`}>Market</span>
                </label>
                <label className="flex-1 flex items-center justify-center cursor-pointer">
                  <input
                    type="radio"
                    name="priceMode"
                    value="Specific"
                    checked={formData.priceMode === 'Specific'}
                    onChange={(e) => handleInputChange('priceMode', e.target.value)}
                    className="sr-only"
                  />
                  <span className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                    formData.priceMode === 'Specific' 
                      ? 'bg-blue-600 text-white' 
                      : 'text-gray-600 hover:bg-gray-200'
                  }`}>Specific Price</span>
                </label>
              </div>
            </div>
          </div>

          {/* Price Information */}
          {formData.priceMode === 'Market' && currentQuote && (
            <div className="md:col-span-2">
              <div className="grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg">
                <div className="text-center">
                  <div className="text-xs text-gray-500 uppercase font-medium">Ask</div>
                  <div className="text-xl font-bold text-green-600">{currentQuote.ask.toFixed(selectedInstrument?.precision || 4)}</div>
                </div>
                <div className="text-center">
                  <div className="text-xs text-gray-500 uppercase font-medium">Bid</div>
                  <div className="text-xl font-bold text-red-600">{currentQuote.bid.toFixed(selectedInstrument?.precision || 4)}</div>
                </div>
              </div>
            </div>
          )}

          {formData.priceMode === 'Specific' && (
            <div className="md:col-span-2 space-y-3">
              {currentQuote && (
                <div className="p-3 bg-blue-50 rounded-lg border border-blue-100">
                  <div className="text-sm text-blue-700 font-medium">
                    Current Market Price: {currentQuote.last.toFixed(selectedInstrument?.precision || 4)}
                  </div>
                </div>
              )}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1.5">
                  Specific Price
                </label>
                <input
                  type="number"
                  value={formData.specificPrice}
                  onChange={(e) => handleInputChange('specificPrice', e.target.value)}
                  placeholder="1.0850"
                  step={selectedInstrument?.tickSize || 0.0001}
                  className="w-full px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                {errors.specificPrice && <p className="mt-1 text-xs text-red-600">{errors.specificPrice}</p>}
              </div>
            </div>
          )}

          {/* Take Profit and Stop Loss Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Take Profit */}
            <div>
              <div className="flex items-center gap-3 mb-2">
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.tpEnabled}
                    onChange={(e) => handleInputChange('tpEnabled', e.target.checked)}
                    className="sr-only"
                  />
                  <div className={`w-11 h-6 rounded-full transition-colors ${formData.tpEnabled ? 'bg-blue-600' : 'bg-gray-300'}`}>
                    <div className={`w-5 h-5 bg-white rounded-full shadow transform transition-transform ${formData.tpEnabled ? 'translate-x-5' : 'translate-x-0'} mt-0.5 ml-0.5`}></div>
                  </div>
                  <span className="ml-3 text-sm font-medium text-gray-700">Take Profit</span>
                </label>
              </div>
              {formData.tpEnabled && (
                <div className="flex items-center gap-2">
                  <button
                    type="button"
                    onClick={() => stepValue('tpValue', -1)}
                    className="w-8 h-8 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors text-gray-600"
                  >
                    −
                  </button>
                  <input
                    type="number"
                    value={formData.tpValue}
                    onChange={(e) => handleInputChange('tpValue', e.target.value)}
                    placeholder="1.0950"
                    step={selectedInstrument?.tickSize || 0.0001}
                    className="flex-1 px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <button
                    type="button"
                    onClick={() => stepValue('tpValue', 1)}
                    className="w-8 h-8 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors text-gray-600"
                  >
                    +
                  </button>
                </div>
              )}
              {errors.tpValue && <p className="mt-1 text-xs text-red-600">{errors.tpValue}</p>}
            </div>

            {/* Stop Loss */}
            <div>
              <div className="flex items-center gap-3 mb-2">
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.slEnabled}
                    onChange={(e) => handleInputChange('slEnabled', e.target.checked)}
                    className="sr-only"
                  />
                  <div className={`w-11 h-6 rounded-full transition-colors ${formData.slEnabled ? 'bg-blue-600' : 'bg-gray-300'}`}>
                    <div className={`w-5 h-5 bg-white rounded-full shadow transform transition-transform ${formData.slEnabled ? 'translate-x-5' : 'translate-x-0'} mt-0.5 ml-0.5`}></div>
                  </div>
                  <span className="ml-3 text-sm font-medium text-gray-700">Stop Loss</span>
                </label>
              </div>
              {formData.slEnabled && (
                <div className="flex items-center gap-2">
                  <button
                    type="button"
                    onClick={() => stepValue('slValue', -1)}
                    className="w-8 h-8 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors text-gray-600"
                  >
                    −
                  </button>
                  <input
                    type="number"
                    value={formData.slValue}
                    onChange={(e) => handleInputChange('slValue', e.target.value)}
                    placeholder="1.0800"
                    step={selectedInstrument?.tickSize || 0.0001}
                    className="flex-1 px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <button
                    type="button"
                    onClick={() => stepValue('slValue', 1)}
                    className="w-8 h-8 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors text-gray-600"
                  >
                    +
                  </button>
                </div>
              )}
              {errors.slValue && <p className="mt-1 text-xs text-red-600">{errors.slValue}</p>}
            </div>
          </div>

          {/* Description */}
          <div>
              <label className="block text-sm font-medium text-gray-700 mb-1.5">
                Description (Optional)
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder="Technical Analysis, News Event, etc."
                rows={3}
                className="w-full px-3 py-2.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
              />
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex gap-4 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={() => handleSubmit('Buy')}
              disabled={isSubmitting}
              className="flex-1 px-6 py-3 bg-green-600 hover:bg-green-700 disabled:bg-gray-300 text-white rounded-lg font-semibold transition-colors shadow-sm"
            >
              {isSubmitting ? 'Creating...' : 
                currentQuote && formData.priceMode === 'Market' 
                  ? `Buy @ ${currentQuote.ask.toFixed(selectedInstrument?.precision || 4)}`
                  : 'Buy'
              }
            </button>
            <button
              type="button"
              onClick={() => handleSubmit('Sell')}
              disabled={isSubmitting}
              className="flex-1 px-6 py-3 bg-red-600 hover:bg-red-700 disabled:bg-gray-300 text-white rounded-lg font-semibold transition-colors shadow-sm"
            >
              {isSubmitting ? 'Creating...' : 
                currentQuote && formData.priceMode === 'Market' 
                  ? `Sell @ ${currentQuote.bid.toFixed(selectedInstrument?.precision || 4)}`
                  : 'Sell'
              }
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}